name: CI

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.10

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry install

    - name: Build and run Docker containers
      run: |
        docker-compose -f docker-compose.yml up --build -d

    - name: Run linters and type checks
      run: |
        docker-compose exec api poetry run black --check .
        docker-compose exec api poetry run isort --check-only .
        docker-compose exec api poetry run mypy .

    - name: Run tests
      env:
        RDS_HOST: ${{ secrets.RDS_HOST }}
        RDS_PORT: ${{ secrets.RDS_PORT }}
        RDS_DB_NAME: ${{ secrets.RDS_DB_NAME }}
        RDS_USER: ${{ secrets.RDS_USER }}
        RDS_PASSWORD: ${{ secrets.RDS_PASSWORD }}
        DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
        DJANGO_ALLOWED_HOSTS: ${{ secrets.DJANGO_ALLOWED_HOSTS }}
        DJANGO_DEBUG: ${{ secrets.DJANGO_DEBUG }}
      run: |
        cp api/app/config/settings.py api/app/config/settings_ci.py
        sed -i 's/DEBUG = True/DEBUG = False/' api/app/config/settings_ci.py
        sed -i 's/ALLOWED_HOSTS = \[\]/ALLOWED_HOSTS = ["localhost"]/' api/app/config/settings_ci.py
        sed -i "s/DATABASES = .*/DATABASES = {'default': {'ENGINE': 'django.db.backends.postgresql', 'NAME': '${{ secrets.RDS_DB_NAME }}', 'USER': '${{ secrets.RDS_USER }}', 'PASSWORD': '${{ secrets.RDS_PASSWORD }}', 'HOST': '${{ secrets.RDS_HOST }}', 'PORT': '${{ secrets.RDS_PORT }}'}}/" api/app/config/settings_ci.py
        docker-compose exec api poetry run python manage.py migrate --settings=api.app.config.settings_ci
        docker-compose exec api poetry run python manage.py test --settings=api.app.config.settings_ci
